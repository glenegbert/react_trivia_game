{"version":3,"sources":["js/actions/index.js","js/constants/action-types.js","helpers/react_utils.js","components/game_intro.jsx","js/constants/game-states.js","helpers/questions_helpers.js","components/question_display.jsx","components/game_play.jsx","helpers/results_helpers.js","components/results.jsx","components/trivia_game.jsx","App.js","serviceWorker.js","js/reducers/index.js","js/store/index.js","index.js"],"names":["updateGameState","gameState","type","payload","react_utils","bemRoot","bemStem","concat","bem","ReactUtils","Intro","connect","state","dispatch","_ref","react_default","a","createElement","className","onClick","questions_helpers","question","replace","QuestionDisplay","number","addResponse","totalQuestions","category","QuestionHelpers","response","GamePlay","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addResponseWithPossibleChangeToResults","bind","assertThisInitialized","_this2","axios","get","then","json","props","addQuestions","data","results","components_question_display","lastQuestionNumber","nextQuestion","questionNumber","questions","length","questionsToBeAnswered","filter","undefined","questionsLoaded","displayNextQuestionOrGoToResults","loadingIndicator","Component","questionCorrect","toString","correct_answer","toLowerCase","results_helpers","ResultDisplay","_ref2","results_PlusMinusIndicator","PlusMinusIndicator","_ref3","ResultsHelpers","clearQuestions","map","results_ResultDisplay","components_game_intro","game_play","components_results","gameScreen","App","components_trivia_game","Boolean","window","location","hostname","match","initialState","newQuestions","push","assign","rootReducer","arguments","action","objectSpread","store","createStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e626ad56.chunk.js","sourcesContent":["import {\n  ADD_QUESTIONS, UPDATE_GAMESTATE, ADD_RESPONSE, CLEAR_QUESTIONS,\n} from '../constants/action-types';\n\nconst addQuestions = questions => ({ type: ADD_QUESTIONS, payload: questions });\n\nconst updateGameState = gameState => ({ type: UPDATE_GAMESTATE, payload: gameState });\n\nconst addResponse = response => ({ type: ADD_RESPONSE, payload: response });\n\nconst clearQuestions = () => ({ type: CLEAR_QUESTIONS });\n\n\nexport {\n  addQuestions, updateGameState, addResponse, clearQuestions,\n};\n","const ADD_QUESTIONS = 'ADD_QUESTIONS';\n\nconst UPDATE_GAMESTATE = 'UPDATE_GAMESTATE';\n\nconst ADD_RESPONSE = 'ADD_RESPONSE';\n\nconst CLEAR_QUESTIONS = 'CLEAR_QUESTIONS';\n\nexport {\n  ADD_QUESTIONS, UPDATE_GAMESTATE, ADD_RESPONSE, CLEAR_QUESTIONS,\n};\n","export default {\n  makeBem: bemRoot => bemStem => `${bemRoot}__${bemStem}`,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { updateGameState } from '../js/actions/index';\nimport { GAME_PLAY } from '../js/constants/game-states';\nimport '../scss/game_intro.scss';\nimport ReactUtils from '../helpers/react_utils';\n\nconst bem = ReactUtils.makeBem('game-intro');\n\nconst mapStateToProps = state => ({ gameState: state.gameState });\n\nconst mapDispatchToProps = dispatch => ({\n  updateGameState: gameState => dispatch(updateGameState(gameState)),\n});\n\nconst GameIntro = ({ updateGameState }) => (\n  <div>\n    <div className={bem('header')}>\n      <h2><strong>Welcome to the Trivia Challenge!</strong></h2>\n    </div>\n    <div className={bem('body')}>\n      <h2>You will be presented with 10 True or False questions.</h2>\n      <br />\n      <br />\n      <h2>Can you score 100%? </h2>\n    </div>\n    <div className={bem('begin-button')}>\n      <button type=\"button\" onClick={() => updateGameState(GAME_PLAY)}>\n         BEGIN\n      </button>\n    </div>\n  </div>);\n\nGameIntro.propTypes = {\n  updateGameState: PropTypes.func.isRequired,\n};\n\nconst Intro = connect(mapStateToProps, mapDispatchToProps)(GameIntro);\n\nexport default Intro;\n","const INTRO = 'intro';\n\nconst GAME_PLAY = 'gamePlay';\n\nconst RESULTS = 'results';\n\nexport {\n  INTRO, GAME_PLAY, RESULTS\n};\n","export default {\n  cleanQuestion: question => {\n     return question.replace(/&quot;/g, '\"')\n                    .replace(/&#039;/g,\"'\")\n                    .replace(/&ocirc;/g,\"ô\")\n                    .replace(/&Aring;/g,\"Å\")\n  }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../scss/question_display.scss';\nimport ReactUtils from '../helpers/react_utils';\nimport QuestionHelpers from '../helpers/questions_helpers';\n\nconst bem = ReactUtils.makeBem('question-display');\n\nconst QuestionDisplay = ({\n  question, number, addResponse, totalQuestions,\n}) => (\n  <div>\n    <div className={bem('header')}>\n      <h2><strong>{question.category}</strong></h2>\n    </div>\n    <div className={bem('question')}>\n      {QuestionHelpers.cleanQuestion(question.question)}\n    </div>\n    <div className={bem('question-number')}>\n      {number}/\n      {totalQuestions}\n    </div>\n    <div className={bem('response-buttons')}>\n      <button type=\"button\" onClick={() => addResponse({ response: true, question })}> True </button>\n      <button type=\"button\" onClick={() => addResponse({ response: false, question })}> False </button>\n    </div>\n  </div>\n);\n\nQuestionDisplay.propTypes = {\n  question: PropTypes.shape({ category: PropTypes.string, question: PropTypes.string }).isRequired,\n  number: PropTypes.number.isRequired,\n  addResponse: PropTypes.func.isRequired,\n  totalQuestions: PropTypes.number.isRequired,\n};\n\nexport default QuestionDisplay;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { addQuestions, addResponse, updateGameState } from '../js/actions/index';\nimport QuestionDisplay from './question_display';\nimport { RESULTS } from '../js/constants/game-states';\n\n\nconst mapDispatchToProps = dispatch => ({\n  addQuestions: questions => dispatch(addQuestions(questions)),\n  addResponse: response => dispatch(addResponse(response)),\n  updateGameState: gameState => dispatch(updateGameState(gameState)),\n});\n\nconst mapStateToProps = state => ({ questions: state.questions });\n\nclass GamePlay extends Component {\n  constructor() {\n    super();\n\n    this.addResponseWithPossibleChangeToResults = this.addResponseWithPossibleChangeToResults.bind(this);\n  }\n\n  componentDidMount() {\n    axios.get('https://opentdb.com/api.php?amount=10&difficulty=hard&type=boolean')\n      .then(json => this.props.addQuestions(json.data.results));\n  }\n\n  loadingIndicator() {\n    return (\n      <div>\n        Loading\n      </div>);\n  }\n\n  displayNextQuestionOrGoToResults() {\n    return (\n      <div>\n        <QuestionDisplay\n          totalQuestions={this.lastQuestionNumber()}\n          question={this.nextQuestion()}\n          number={this.questionNumber()}\n          addResponse={this.addResponseWithPossibleChangeToResults}\n        />\n      </div>\n    );\n  }\n\n  addResponseWithPossibleChangeToResults(response) {\n    this.props.addResponse(response);\n    if (this.questionNumber() === this.lastQuestionNumber()) {\n      this.props.updateGameState(RESULTS);\n    }\n  }\n\n  lastQuestionNumber(){\n    return this.props.questions.length;\n  }\n\n  questionsLoaded() {\n    return this.props.questions.length > 0;\n  }\n\n  nextQuestion() {\n    return this.questionsToBeAnswered()[0];\n  }\n\n  questionNumber() {\n    return ((this.lastQuestionNumber() + 1) -\n       this.questionsToBeAnswered().length);\n  }\n\n  questionsToBeAnswered() {\n    return this.props.questions\n      .filter(question => question.response === undefined);\n  }\n\n  moreQuestions() {\n    return this.questionsToBeAnswered().length > 0;\n  }\n\n  render() {\n    if (this.questionsLoaded()) {\n      return this.displayNextQuestionOrGoToResults();\n    }\n    return this.loadingIndicator();\n  }\n}\n\nGamePlay.propTypes = {\n  addQuestions: PropTypes.func.isRequired,\n  updateGameState: PropTypes.func.isRequired,\n  addResponse: PropTypes.func.isRequired,\n  questions: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GamePlay);\n","const questionCorrect = (question) => {\n    return question.response.toString() === question.correct_answer.toLowerCase();\n}\n\nexport default {\n  numberCorrect: (questions) => {\n    return questions.filter(question => {\n       return questionCorrect(question)\n    }).length\n  },\n  questionCorrect: questionCorrect\n}\n\n\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { updateGameState, clearQuestions } from '../js/actions/index';\nimport { INTRO } from '../js/constants/game-states';\nimport '../scss/results.scss';\nimport ReactUtils from '../helpers/react_utils';\nimport ResultsHelpers from '../helpers/results_helpers';\nimport QuestionHelpers from '../helpers/questions_helpers';\n\nconst bem = ReactUtils.makeBem('results');\n\nconst mapDispatchToProps = dispatch => ({\n  updateGameState: gameState => dispatch(updateGameState(gameState)),\n  clearQuestions: () => dispatch(clearQuestions()),\n});\n\nconst mapStateToProps = state => ({ questions: state.questions });\n\nconst Results = ({ questions, updateGameState, clearQuestions }) => (\n  <div>\n    <div className={bem('header')}>\n      <h2> You Scored </h2>\n      <h2>\n        {ResultsHelpers.numberCorrect(questions)}/\n        {questions.length}\n      </h2>\n    </div>\n    <div>\n      <ul className={bem('question-list')}>\n        {questions.map(question => <ResultDisplay question={question} />)}\n      </ul>\n    </div>\n    <button className={bem('play-again-button')} type=\"button\" onClick={() => { updateGameState(INTRO); clearQuestions(); }}>Play Again</button>\n  </div>\n);\n\nResults.propTypes = {\n  updateGameState: PropTypes.func.isRequired,\n  clearQuestions: PropTypes.func.isRequired,\n  questions: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nconst ResultDisplay = ({ question }) => (\n  <li className={bem('question')}>\n    {<PlusMinusIndicator question={question} />}\n    <span>\n      {QuestionHelpers.cleanQuestion(question.question)}\n    </span>\n    <div className={bem('question__correct-answer')}>\n      CorrectAnswer  = {question.correct_answer}\n    </div>\n  </li>);\n\nResultDisplay.propTypes = {\n  question: PropTypes.shape({\n    question: PropTypes.string.isRequired,\n    correct_answer: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nconst PlusMinusIndicator = ({ question }) => {\n  if (ResultsHelpers.questionCorrect(question)) {\n    return <span> + </span>;\n  }\n  return <span> - </span>;\n};\n\nPlusMinusIndicator.propTypes = {\n  question: PropTypes.shape({\n    response: PropTypes.string.isRequired,\n    correct_answer: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Results);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport GameIntro from './game_intro';\nimport GamePlay from './game_play';\nimport Results from './results';\nimport { INTRO, GAME_PLAY, RESULTS } from '../js/constants/game-states';\nimport '../scss/trivia_game.scss';\n\nconst mapStateToProps = state => ({ gameState: state.gameState });\n\nconst gameScreen = (gameState) => {\n  switch (gameState) {\n    case INTRO:\n      return <GameIntro />;\n    case GAME_PLAY:\n      return <GamePlay />;\n    case RESULTS:\n      return <Results />;\n    default:\n      return <GameIntro />;\n  }\n};\n\nconst TriviaGame = ({ gameState }) => (\n  <div className=\"trivia-game__screen-wrapper\">\n    {gameScreen(gameState)}\n  </div>\n);\n\nTriviaGame.propTypes = {\n  gameState: PropTypes.string.isRequired,\n};\nexport default connect(mapStateToProps)(TriviaGame);\n","import React from 'react';\nimport TriviaGame from './components/trivia_game';\n\nconst App = () => (\n  <div className=\"App\">\n    <TriviaGame />\n  </div>\n);\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n/* eslint-disable no-console, no-param-reassign */\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  ADD_QUESTIONS, UPDATE_GAMESTATE, ADD_RESPONSE, CLEAR_QUESTIONS,\n} from '../constants/action-types';\n\nconst initialState = {\n  gameState: 'intro',\n  questions: [],\n};\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_QUESTIONS:\n      return { ...state, questions: action.payload };\n    case UPDATE_GAMESTATE:\n      return { ...state, gameState: action.payload };\n    case ADD_RESPONSE:\n      return { ...state, questions: addResponse(state.questions, action.payload) };\n    case CLEAR_QUESTIONS:\n      return { ...state, questions: [] };\n    default:\n      return state;\n  }\n};\n\nconst addResponse = (questions, response) => {\n  const newQuestions = questions.filter(\n    question => question !== response.question,\n  );\n  newQuestions\n    .push(Object.assign({ response: response.response },\n      response.question));\n  return newQuestions;\n};\n\nexport default rootReducer;\n","import { createStore } from 'redux';\nimport rootReducer from '../reducers/index';\n\nconst store = createStore(rootReducer);\nexport default store;\n","import App from './App';\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport store from './js/store/index';\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}